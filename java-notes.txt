java
it is a simple language provides security and robust(strong) high performance language
we need jdk in that jre will be there in that jvm will be there 
our .java code is converted to .class code using compiler which is platform independent and that .class code is converted into machine .byte code using jvm which is platform dependent.


variables 
local 
static - memory allocation happens when the class is loaded in the memory

data types 
primitive - which are predefined 
int4 byte1 short2 char1 long8 double8 float4 boolean1
non primitive - user defined
class string arrays

enum - is a special data type which is used to define our own variables
eg: 

enum Days{
Monday , Tuesday , Wednesday}

public class Demo
{
Days d = Days.Monday;
sysout(d); // prints monday
switch (Days)
{
case Monday:
{
sysout("its monday");
break;
}
}
}


opeartors

unary - pre,post ++,--
binary - assignment,arithmatic,logical,bitwise,ternary,relational

Static - dont need to create an object for it, can directly call with its class name
Main - this is where execution of the code starts from

naming convention - camel case
class - noun,UpperCase
Interface - Adjective,Uppercase
Method - verb,lowerUpper
variable - noun,lowerUpper
package - lower
constant- upper_upper

method - has a body with some logic to do and it is written for something to avoid repetition of code.

return type - it is a return type that what out method gonna return , if it is null then mention return type as void.

class - blueprint for a object 
object - entity of a class which has parameters and functionality to do

access specifiers-
public - can be accessed from anywhere
private - only with in that class
protected - only with in that package and subchild if it is in different package
default - only in that package

constructor - used to initialise the object
2 types - no arg, parameterized constructor
There are two rules defined for the constructor.
Constructor name must be the same as its class name
A Constructor must have no explicit return type
A Java constructor cannot be abstract, static, final, and synchronized

static variable - also called as class variable
static method - class method
this keyword - used to distinguish between local variables(method variables decalred inside a method as parameters) and instance variables (declared inside a class) and also refers to the current object.


inheritance - extends keyword
single,multilevel,heirarchial,hybrid

super and this
this is used to refer to the current object and super is used to the parent class 
we can call var,method,constructor using these keywords.


method overloading - having same method name with different number of parameters or with different data types
method overriding - this is done when inheritance is happening when a child extends its parents method and the child also had the same method then it is overriding that method. we cannot override static method and main also as it is static in nature.



//abstraction - hiding details and showing the necessary details.
abstract method - a method which has no body 
abstract class - a class which contains abstract methods it is not necessary that an abstract class contains only abstract methods...it can also have non abstract methods, we cannot create object for abstract class but we can make a reference of a abstract class
if any class is extending an abstract class then it should implemt all the abstract methods present in the abstract class
it can have constructors
Abstract class can have final, non-final, static and non-static variables.
abstract class can have static and final methods also.

interface - used for abstraction
used for multiple inheritance
used for loose coupling - it is a phenomenon that there is a relation between components of the application but there should not be like anything like...if we make changes in one thing we also need to make changes  in the other file also.
in interfaces we have all abstract methods before java 8 
in interface for methods compiler will automatically attach public keyword for abstract methods or compiler will automatically public abstract
in interface fields are by default made public static final by compiler.
Interface has only static and final variables.


changes in interfaces after 8th version of java
we can write default methods in interface
static methods

changes made in interfaces after 9th version of java
we can werite private methods in interfaces.

--------package---------
with the keyword package we can create a package
if we use package com.* all the classes and interfaces are available in that but we need to import the classes and interfaces which we wanted from the other package

Access Modifier	within class	within package	outside package by subclass only	outside package
Private			Y			N				N					N
Default			Y			Y				N					N
Protected			Y			Y				Y					N
Public			Y			Y				Y					Y

-------------------Encapsulation---------------------
wrapping of data in a single class taking all data variables as private and having getters and setters for that.
